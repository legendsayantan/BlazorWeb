@using Radzen.Blazor
@using Microsoft.AspNetCore.Components.WebAssembly.Hosting
@using System.Security.Cryptography;
@using System.Runtime.InteropServices;
@using System.Text;
@using FileDownloader
<div class="maincard centerAlign flex-column" style="display:flex;">
    <div class="centerAlign" id="no_file" style="display:flex; flex-wrap:wrap;">
        <InputFile type="file" id="myFile" name="filename" OnChange=fileSelect style="margin-top:35px;" />
        <EditForm class="inputForm centerAlign" Model="@Params" EditContext="@editContext" style="display:flex; flex-wrap:wrap; margin-left:10px; margin-right:10px;">
            <h6 style="color:white; margin:15px;">Or, Input Raw Text to Encrypt </h6>
            <InputText @bind-Value="@Params.text" class="inputText"/>
        </EditForm>
    </div>
    <div class="centerAlign" style="display:flex;">
        <button class="xcryptButton" @onclick="startTask">
            @action
        </button>
    </div>
</div>
<style>
    .maincard {
        padding:50px;
        border-radius: 25px;
        background: #55b9f3;
        box-shadow: inset 35px 35px 70px #489dcf, inset -35px -35px 70px #62d5ff;
    }
    .centerAlign{
        justify-content:center;
    }
    input[type=file]{
        padding:7px;
        justify-content:center;
    }
    .inputForm{
        margin-top:15px;
        padding:15px;
        border-radius: 25px;
        background: linear-gradient(145deg, #4da7db, #5bc6ff);
        box-shadow:  20px 20px 25px #489dcf,
             -20px -20px 25px #62d5ff;
    }

    .inputCode {
        padding: 15px;
        display: flex;
        flex-wrap: wrap;
    }
    input::file-selector-button {
        border-width: 0px;
        border-radius: 5px;
        background: #55b9f3;
        box-shadow: 3px 3px 6px #489dcf, -3px -3px 6px #62d5ff;
        color:white;
    }
    input::file-selector-button:hover {
        border-width: 0px;
                border-radius: 5px;
                background: #55b9f3;
                box-shadow: 3px 3px 6px #408bb6, -3px -3px 6px #6ae7ff;
        color:white;
    }
    input::file-selector-button:active{
        border-radius: 5px;
        background: #55b9f3;
        box-shadow: inset 3px 3px 6px #489dcf,
            inset -3px -3px 6px #62d5ff;
    }
    input::first-line{
        color:white;
    }
    .inputText{
        padding-left:10px;
        padding-right:10px;
        border-width: 0px;
        border-radius: 25px;
        background: #55b9f3;
        box-shadow: inset 10px 10px 20px #489dcf, inset -10px -10px 20px #62d5ff;
    }

    input[type=text]:focus {
        outline:none;
    }
    .xcryptButton{
        margin-top:25px;
        border-radius: 25px;
        border-width:0px;
        padding:15px;
        padding-left:50px;
        padding-right: 50px;
        color:white;
        background: linear-gradient(145deg, #5bc6ff, #4da7db);
        box-shadow: 10px 10px 20px #489dcf, -10px -10px 20px #62d5ff;
    }
    .xcryptButton:hover{
            border-radius: 25px;
            background: linear-gradient(145deg, #5bc6ff, #4da7db);
            box-shadow: 10px 10px 20px #4494c2, -10px -10px 20px #66deff;
    }
    .xcryptButton:active{
            border-radius: 25px;
            background: #55b9f3;
            box-shadow: inset 10px 10px 20px #489dcf, inset -10px -10px 20px #62d5ff;
    }
</style>
@inject ICryptoService Crypto
@inject Downloader downloader
@inject NavigationManager Nav
@code {
    public EditContext editContext ;
    String action = "Download Result File";
    IBrowserFile file;
    string prompt = "Enter 16 digit Key";
    InputParams Params = new InputParams();
    byte[] OutFile;
    string fileName = "New Encrypted Document.txt";
    public void fileSelect(InputFileChangeEventArgs e){
        file = e.File;

    }
    class InputParams
    {
        public string text { get; set; } = "";
    }
    public async Task startTask()
    {

        if (file == null&&Params.text.Length==0) return;
        byte[] bytes;
        string[] parts;
        if (Params.text.Length!=0)
        {

            bytes = new byte[Params.text.Length];
            bytes = Encoding.UTF8.GetBytes(Params.text);
        }else{
            fileName = file.Name;
            int Byte_Buffer = 512000;
            if (file.Size > Byte_Buffer) return;
            bytes = new byte[file.Size];
            await file.OpenReadStream().ReadAsync(bytes);
        }

        parts = fileName.Split(".");
        if (parts[parts.Length - 1].Contains("xcrypt_"))
        {
            //Decryption
            fileName = fileName.Replace(parts[parts.Length - 1], "") + parts[parts.Length - 1].Replace("xcrypt_", "");
            String data = await Crypto.DecryptAsync(Encoding.UTF8.GetString(bytes));
            OutFile = Encoding.UTF8.GetBytes(data);
            Console.WriteLine(Encoding.UTF8.GetString(OutFile));
        }
        else
        {
            //Encryption
            fileName = fileName.Replace(parts[parts.Length - 1], "") + "xcrypt_" + parts[parts.Length - 1];
            CryptoResult data = await Crypto.EncryptAsync(Encoding.UTF8.GetString(bytes));
            OutFile = Encoding.UTF8.GetBytes(data.Value);
            Console.WriteLine(Encoding.UTF8.GetString(OutFile));
        }
        Params.text = "";
        await downloader.DownloadFromStream(OutFile, fileName);
        Nav.NavigateTo("/xcryptdemo",true);
    }

}
    
