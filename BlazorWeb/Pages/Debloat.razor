@page "/debloat"

<PageTitle>Online Android Debloater</PageTitle>
<h1 class="text center">Online Android Debloater</h1>
<div class="text">
    <h5 class="hidden">Have a phone full of bloatwares? Clean them up !</h5>
    <p class="hidden" style="transition-delay:250ms">
        Datasets for this project is collected from <a href="https://github.com/0x192/universal-android-debloater">Universal Android Debloater</a>.
    </p>
</div>
<section class="center small">
    <div class="container" id="connector">
        <a class="btn flex-row" style="margin:0px;" @onclick="@(() => connectDevice())">
            Connect a device
        </a>
    </div>
    <br />
    <p id="text">Connect an Android device using USB and click on the button.</p>
    
</section>

<section id="deviceControl">
    <p style="display:none" id="processing">Please wait, Processing Apps...</p>
    <div id="list">
        @foreach(AppInfo info in appInfos){
            <AppItem info=info onclick="@(()=>uninstallApp(info))" />
        }
    </div>
</section>

<style>
    code {
        color: white;
        white-space: break-spaces;
        background-color: #133054;
        padding: 3px;
        border-radius: 6px;
    }
    .center {
        display: flex;
        flex-wrap: wrap;
        padding: 25px;
        justify-content: center;
        align-content: center;
        color: powderblue;
        font-family: 'Palatino Linotype';
    }

    .heading {
        margin-top: 100px;
        margin-bottom: 100px;
    }

    .text {
        color: #55b9f3;
    }

    p {
        color: powderblue;
        justify-content: center;
    }

    a:link {
        color: #55b9f3;
        text-decoration: none;
    }

    a:hover {
        text-decoration: underline;
    }

    .btnx:hover {
        color: #55b9f3;
        background-color: #0F2CD4;
    }

    .btnx {
        color: #0F2CD4;
        background-color: #55b9f3;
    }

    .container {
        display: flex;
        flex-wrap: wrap;
        justify-content: center;
        align-items: center;
    }

        .container:link {
            color: white;
        }

    .btn {
        font-size: 1.0rem;
        padding: 1rem 3rem;
        color: #f4f4f4;
        text-transform: uppercase;
        text-decoration: none;
        border: 1px solid #55b9f3;
        position: relative;
        overflow: hidden;
        text-overflow: ellipsis;
        white-space: nowrap;
    }

        .btn:hover {
            box-shadow: 1px 1px 25px 10px #55b9f3;
            text-decoration: none;
            color: powderblue;
        }

        .btn:before {
            content: "";
            position: absolute;
            top: 0;
            left: -100%;
            width: 100%;
            height: 100%;
            background: linear-gradient( 120deg, transparent, #55b9f3, transparent );
            transition: all 650ms;
        }

        .btn:hover:before {
            left: 100%;
        }
    input[type=button]{
        background-color: #0F2CD4;
        color: powderblue;
    }

    input[type=button]:hover{
        background-color: black;
            color: #55b9f3;
    }
    #list{
        display: flex;
        flex-direction: row;
        flex-wrap: wrap;
    }
</style>
@inject IJSRuntime jsRuntime
@code {

    public string packages = "";
    public string json = "[]";
    String[] apps = {};
    List<AppInfo> appInfos = new List<AppInfo>();
    protected async Task copyText(string str)
    {
        await jsRuntime.InvokeVoidAsync("navigator.clipboard.writeText", str);
        await jsRuntime.InvokeVoidAsync("alert", "Code copied to clipboard.");
    }
    protected override async Task OnInitializedAsync()
    {
        await jsRuntime.InvokeVoidAsync("animatePage");
        await jsRuntime.InvokeVoidAsync("animatePageObserve");
    }
    protected async Task connectDevice()
    {
        await jsRuntime.InvokeVoidAsync("connectADB","connector","text","deviceControl");
        packages = await jsRuntime.InvokeAsync<String>("getPackages");
        await jsRuntime.InvokeVoidAsync("eval", "document.getElementById('processing').style.display='block'");
        json = await jsRuntime.InvokeAsync<String>("fetchAppInfo","text");
        apps = packages.Split("\n");
        AppInfo[]? allApps = System.Text.Json.JsonSerializer.Deserialize<AppInfo[]>(json);
        foreach(string str in apps){
            AppInfo app = new AppInfo();
            string[] segments = str.Split(".apk=");
            app.id = segments[segments.Length - 1].Trim();
            if (string.IsNullOrEmpty(app.id)) continue;
            if (app.id.Equals("package:/")) continue;
            foreach (AppInfo appInfo in allApps ?? Enumerable.Empty<AppInfo>())
            {
                if (appInfo.id.Trim().Equals(app.id)) app = appInfo;
            }
            if(app.description.Contains("(https://")){
                string[] parts = app.description.Split(" ");
                foreach(string part in parts){
                    if(part.StartsWith("(https://")&& part.EndsWith(")"))
                    {
                        parts[parts.IndexOf(part)] = "[<a href='" + part.Replace("(https://", "").Replace(")","") + "'>Reference</a>]";
                    }
                }
            }
            appInfos.Add(app);
        }
        Console.WriteLine(System.Text.Json.JsonSerializer.Serialize(appInfos.ToArray()));
        if(appInfos.Count<1){
            await jsRuntime.InvokeVoidAsync("eval", "document.getElementById('text').innerText='Failed to retrieve app data, try refreshing the page.'");
            await jsRuntime.InvokeVoidAsync("disconnect");
        }else{
            await jsRuntime.InvokeVoidAsync("eval", "document.getElementById('processing').style.display='none'");
        }
    }
    protected async Task access(int count){

    }
    protected async Task executeCommand(String code){
        await jsRuntime.InvokeVoidAsync("executeForResult", code);
    }
    protected async Task uninstallApp(AppInfo info){
        Console.WriteLine("Requested to uninstall "+info.id);
        if(info.removal.Equals("Unsafe")){
            await jsRuntime.InvokeVoidAsync("alert","This app is unsafe to remove and will possibly break your system.");
        }else if(info.removal.Equals("Unknown")){
            bool ask = await jsRuntime.InvokeAsync<bool>("prompt","Removal may cause problems if it is a system app.\nUninstall Anyway??");
            if(ask){
                executeCommand("pm uninstall 0 -k --user "+info.id);
            }
        }else{
            bool ask = await jsRuntime.InvokeAsync<bool>("prompt","Uninstall app "+info.id+" ??");
            if(ask){
                executeCommand("pm uninstall 0 -k --user "+info.id);
            }
        }
    }
}

