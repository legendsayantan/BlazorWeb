@page "/debloat"

<PageTitle>Online Android Debloater</PageTitle>
<h1 class="text center">Online Android Debloater</h1>
<div class="text">
    <h4 class="hidden">Have a phone full of bloatwares? Clean them up without installing anything!</h4>
</div>

<section class="center small" style="margin:0px;padding:0px;max-width:100%;flex-direction:column;align-items:center">
    <div id="connector" class="center" style="flex-direction:column;align-items:center">
        <h4>Steps to debloat</h4>
        <ol class="center" style="flex-direction:column">
            <li class="hidden">Turn on developer options in the Android device</li>
            <li class="hidden" style="transition-delay:200ms">Enable USB debugging in developer options</li>
            <li class="hidden" style="transition-delay:400ms">Connect the Android device using an USB cable</li>
            <li class="hidden" style="transition-delay:600ms">Click on the button below.</li>
        </ol>
        <div class="container" style="margin:0px">
            <a class="btn flex-row" style="margin:0px;" @onclick="@(() => connectDevice())">
                Connect a device
            </a>
        </div>
    </div>
    <br />
    <p id="text">Connect an Android device using USB and click on the button.</p>


</section>

<section id="deviceControl" class="center" style="display:none;margin:0px;padding:0px;">
    <div class="center">
        <input type="button" value="Disconnect" @onclick=@(()=>reset()) style="margin:10px" />
        <p style="display:none" id="processing">Please wait, Processing Apps...</p>

    </div>
    <div id="app_header" class="center" style="display:none;align-items:center">
        <h4 style="margin-top:10px">Select the app you want to uninstall...</h4>
        <img id="search_icon" title="search" style="height:30px;width:30px; margin:0px 15px; cursor:pointer" src="https://www.svgrepo.com/show/425208/search-find-ecommerce.svg" @onclick=@applyFilter />
    </div>
    <div style="display:flex;flex-direction:row;flex-wrap:wrap;overflow-wrap:anywhere">
        @foreach (AppInfo info in appInfos)
        {
            <AppItem info=info onclick="@(()=>uninstallApp(info))" />
        }
    </div>
    @if (temporaryAppInfos.Count > 0 && appInfos.Count == 0)
    {
        <div class="center" style="align-items:center; margin:25px">
            <p>No apps found through search.</p>
        </div>
    }
</section>
<section style="margin:25px">
    <p style="transition-delay:250ms;font-size:small">
        App informations shown here are collected from <a href="https://github.com/0x192/universal-android-debloater">Universal Android Debloater</a>.
    </p>
</section>
<style>
    code {
        color: white;
        white-space: break-spaces;
        background-color: #133054;
        padding: 3px;
        border-radius: 6px;
    }

    .center {
        display: flex;
        flex-wrap: wrap;
        padding: 25px;
        justify-content: center;
        align-content: center;
        align-items: baseline;
        color: powderblue;
        font-family: 'Palatino Linotype';
    }

    .heading {
        margin-top: 100px;
        margin-bottom: 100px;
    }

    .text {
        color: #55b9f3;
    }

    p {
        color: powderblue;
        justify-content: center;
    }

    a:link {
        color: #55b9f3;
        text-decoration: none;
    }

    a:hover {
        text-decoration: underline;
    }

    .btnx:hover {
        color: #55b9f3;
        background-color: #0F2CD4;
    }

    .btnx {
        color: #0F2CD4;
        background-color: #55b9f3;
    }

    .container {
        display: flex;
        flex-wrap: wrap;
        flex-direction: column;
        justify-content: center;
        align-items: center;
    }

        .container:link {
            color: white;
        }

    .btn {
        font-size: 1.0rem;
        padding: 1rem 3rem;
        color: #f4f4f4;
        text-transform: uppercase;
        text-decoration: none;
        border: 1px solid #55b9f3;
        position: relative;
        overflow: hidden;
        text-overflow: ellipsis;
        white-space: nowrap;
    }

        .btn:hover {
            box-shadow: 1px 1px 25px 10px #55b9f3;
            text-decoration: none;
            color: powderblue;
        }

        .btn:before {
            content: "";
            position: absolute;
            top: 0;
            left: -100%;
            width: 100%;
            height: 100%;
            background: linear-gradient( 120deg, transparent, #55b9f3, transparent );
            transition: all 650ms;
        }

        .btn:hover:before {
            left: 100%;
        }

    input[type=button] {
        background-color: #0F2CD4;
        color: powderblue;
    }

        input[type=button]:hover {
            background-color: black;
            color: #55b9f3;
        }

    #list {
        display: flex;
        flex-direction: row;
        flex-wrap: wrap;
    }
</style>
@inject IJSRuntime jsRuntime
@inject NavigationManager nav
@code {

    public string packages = "";
    public string json = "[]";
    String[] apps = { };
    List<AppInfo> appInfos = new List<AppInfo>();
    List<AppInfo> temporaryAppInfos = new List<AppInfo>();
    protected async Task copyText(string str)
    {
        await jsRuntime.InvokeVoidAsync("navigator.clipboard.writeText", str);
        await jsRuntime.InvokeVoidAsync("alert", "Code copied to clipboard.");
    }
    protected override async Task OnInitializedAsync()
    {
        await jsRuntime.InvokeVoidAsync("animatePage");
        await jsRuntime.InvokeVoidAsync("animatePageObserve");
    }
    protected async Task connectDevice()
    {
        await jsRuntime.InvokeVoidAsync("connectADB", "connector", "text", "deviceControl");
        await jsRuntime.InvokeVoidAsync("eval", "document.getElementById('processing').style.display='block'");
        json = await jsRuntime.InvokeAsync<String>("fetchAppInfo", "text");
        Console.WriteLine("json size " + json.Length);
        await waitForConnection();


    }
    protected async Task waitForConnection()
    {
        bool connectionStatus = await jsRuntime.InvokeAsync<bool>("checkConnection");
        if (connectionStatus)
        {
            packages = await jsRuntime.InvokeAsync<String>("getPackages");
            Console.WriteLine("packages size " + packages.Length);
            if (packages.Length > 2)
            {
                await processDevice();
            }
            else
            {
                await Task.Delay(1000);
                await waitForConnection();
                Console.WriteLine("failure");
            }
        }
        else
        {
            await Task.Delay(1000);
            await waitForConnection();
        }
    }
    protected async Task processDevice()
    {
        apps = packages.Split("\n");
        AppInfo[]? allApps = System.Text.Json.JsonSerializer.Deserialize<AppInfo[]>(json);
        foreach (string str in apps)
        {
            AppInfo app = new AppInfo();
            string[] segments = str.Split(".apk=");
            app.id = segments[segments.Length - 1].Trim();
            if (string.IsNullOrEmpty(app.id)) continue;
            if (app.id.Contains("package:/")) continue;
            foreach (AppInfo appInfo in allApps ?? Enumerable.Empty<AppInfo>())
            {
                if (appInfo.id.Trim().Equals(app.id)) app = appInfo;
            }
            if (app.description.Contains("https://"))
            {
                string[] parts = app.description.Split("(");
                string newDesc = "";
                foreach (string p in parts)
                {
                    string part = p.Split(")")[0];
                    if (part.StartsWith("https://") && (!part.Contains(" ")))
                    {
                        app.url = part;
                    }
                    else
                    {
                        newDesc = newDesc + " " + part;
                    }
                }
                if ((app.url ?? "").Equals(""))
                {
                    string[] parts2 = newDesc.Split(" ");
                    newDesc = "";
                    foreach (string part in parts2)
                    {
                        if (part.StartsWith("https://") && (!part.Contains(" ")))
                        {
                            app.url = "link-->" + part;
                        }
                        else
                        {
                            newDesc = newDesc + " " + part;
                        }
                    }
                }
                app.description = newDesc;
            }
            appInfos.Add(app);
        }
        await Task.Delay(2000);
        if (appInfos.Count < 1)
        {
            await jsRuntime.InvokeVoidAsync("eval", "document.getElementById('text').innerText='Failed to retrieve app data, try refreshing the page.';");
            await jsRuntime.InvokeVoidAsync("disconnect");
        }
        else
        {
            await jsRuntime.InvokeVoidAsync("eval", "document.getElementById('processing').style.display='none'");
            await jsRuntime.InvokeVoidAsync("eval", "document.getElementById('app_header').style.display='flex'");
        }
    }
    protected async Task executeCommand(String code)
    {
        await jsRuntime.InvokeVoidAsync("executeForResult", code);
    }
    protected async Task reset()
    {
        await jsRuntime.InvokeVoidAsync("disconnect");
        nav.NavigateTo(nav.Uri, true);
    }
    protected async Task uninstallApp(AppInfo info)
    {
        Console.WriteLine("Requested to uninstall " + info.id);
        if (info.removal.Equals("Unsafe"))
        {
            await jsRuntime.InvokeVoidAsync("alert", "This app is unsafe to remove and will possibly break your system.");
        }
        else if (info.removal.Equals("Unknown"))
        {
            bool ask = await jsRuntime.InvokeAsync<bool>("confirm", "Removal may cause problems if it is a system app.\nUninstall Anyway??");
            if (ask)
            {
                await executeCommand("pm uninstall " + info.id);
                appInfos.Remove(info);
            }
        }
        else
        {
            bool ask = await jsRuntime.InvokeAsync<bool>("confirm", "Uninstall app " + info.id + " ??");
            if (ask)
            {
                await executeCommand("pm uninstall " + info.id);
                appInfos.Remove(info);
            }
        }
    }
    protected async Task applyFilter()
    {
        if (temporaryAppInfos.Count > 0)
        {
            appInfos = temporaryAppInfos;
            temporaryAppInfos = new List<AppInfo>();
            await jsRuntime.InvokeVoidAsync("eval", "document.getElementById('search_icon').style.filter='unset'");
            await jsRuntime.InvokeVoidAsync("eval", "document.getElementById('search_icon').title='search'");
        }
        else
        {
            string filter = await jsRuntime.InvokeAsync<string>("prompt", "Search for app id, removal category or matching description.") ?? "";
            if (filter.Length > 0)
            {
                temporaryAppInfos = appInfos;
                appInfos = appInfos.Where(x => (x.id.ToLower().Contains(filter.ToLower()) || x.removal.ToLower().Contains(filter.ToLower()) || x.description.ToLower().Contains(filter.ToLower()))).ToList();
                await jsRuntime.InvokeVoidAsync("eval", "document.getElementById('search_icon').style.filter='grayscale(1)'");
                await jsRuntime.InvokeVoidAsync("eval", "document.getElementById('search_icon').title='reset search'");
            }
            else
            {

            }
        }
    }
}

